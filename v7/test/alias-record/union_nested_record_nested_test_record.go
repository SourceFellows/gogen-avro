// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     nested.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
)

type UnionNestedRecordNestedTestRecordTypeEnum int

const (
	UnionNestedRecordNestedTestRecordTypeEnumNestedRecord UnionNestedRecordNestedTestRecordTypeEnum = 0

	UnionNestedRecordNestedTestRecordTypeEnumNestedTestRecord UnionNestedRecordNestedTestRecordTypeEnum = 1
)

type UnionNestedRecordNestedTestRecord struct {
	NestedRecord     *NestedRecord
	NestedTestRecord *NestedTestRecord
	UnionType        UnionNestedRecordNestedTestRecordTypeEnum
}

func writeUnionNestedRecordNestedTestRecord(r *UnionNestedRecordNestedTestRecord, w io.Writer) error {

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNestedRecordNestedTestRecordTypeEnumNestedRecord:
		return writeNestedRecord(r.NestedRecord, w)
	case UnionNestedRecordNestedTestRecordTypeEnumNestedTestRecord:
		return writeNestedTestRecord(r.NestedTestRecord, w)
	}
	return fmt.Errorf("invalid value for *UnionNestedRecordNestedTestRecord")
}

func NewUnionNestedRecordNestedTestRecord() *UnionNestedRecordNestedTestRecord {
	return &UnionNestedRecordNestedTestRecord{}
}

func (_ *UnionNestedRecordNestedTestRecord) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNestedRecordNestedTestRecord) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNestedRecordNestedTestRecord) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNestedRecordNestedTestRecord) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNestedRecordNestedTestRecord) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNestedRecordNestedTestRecord) SetString(v string)  { panic("Unsupported operation") }
func (r *UnionNestedRecordNestedTestRecord) SetLong(v int64) {
	r.UnionType = (UnionNestedRecordNestedTestRecordTypeEnum)(v)
}
func (r *UnionNestedRecordNestedTestRecord) Get(i int) types.Field {
	switch i {
	case 0:
		r.NestedRecord = NewNestedRecord()
		return r.NestedRecord
	case 1:
		r.NestedTestRecord = NewNestedTestRecord()
		return r.NestedTestRecord
	}
	panic("Unknown field index")
}
func (_ *UnionNestedRecordNestedTestRecord) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNestedRecordNestedTestRecord) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNestedRecordNestedTestRecord) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNestedRecordNestedTestRecord) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNestedRecordNestedTestRecord) Finalize()                {}

func (r *UnionNestedRecordNestedTestRecord) MarshalJSON() ([]byte, error) {
	if r == nil {
		return []byte("null"), nil
	}
	switch r.UnionType {
	case UnionNestedRecordNestedTestRecordTypeEnumNestedRecord:
		return json.Marshal(map[string]interface{}{"NestedRecord": r.NestedRecord})
	case UnionNestedRecordNestedTestRecordTypeEnumNestedTestRecord:
		return json.Marshal(map[string]interface{}{"NestedTestRecord": r.NestedTestRecord})
	}
	return nil, fmt.Errorf("invalid value for *UnionNestedRecordNestedTestRecord")
}

func (r *UnionNestedRecordNestedTestRecord) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if value, ok := fields["NestedRecord"]; ok {
		r.UnionType = 0
		return json.Unmarshal([]byte(value), &r.NestedRecord)
	}
	if value, ok := fields["NestedTestRecord"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.NestedTestRecord)
	}
	return fmt.Errorf("invalid value for *UnionNestedRecordNestedTestRecord")
}
