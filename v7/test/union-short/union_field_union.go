// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     union.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
)

type UnionFieldUnionTypeEnum int

const (
	UnionFieldUnionTypeEnumInt UnionFieldUnionTypeEnum = 0

	UnionFieldUnionTypeEnumLong UnionFieldUnionTypeEnum = 1

	UnionFieldUnionTypeEnumFloat UnionFieldUnionTypeEnum = 2

	UnionFieldUnionTypeEnumDouble UnionFieldUnionTypeEnum = 3

	UnionFieldUnionTypeEnumString UnionFieldUnionTypeEnum = 4

	UnionFieldUnionTypeEnumBool UnionFieldUnionTypeEnum = 5
)

type UnionFieldUnion struct {
	Int       int32
	Long      int64
	Float     float32
	Double    float64
	String    string
	Bool      bool
	Null      *types.NullVal
	UnionType UnionFieldUnionTypeEnum
}

func writeUnionFieldUnion(r *UnionFieldUnion, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(6, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionFieldUnionTypeEnumInt:
		return vm.WriteInt(r.Int, w)
	case UnionFieldUnionTypeEnumLong:
		return vm.WriteLong(r.Long, w)
	case UnionFieldUnionTypeEnumFloat:
		return vm.WriteFloat(r.Float, w)
	case UnionFieldUnionTypeEnumDouble:
		return vm.WriteDouble(r.Double, w)
	case UnionFieldUnionTypeEnumString:
		return vm.WriteString(r.String, w)
	case UnionFieldUnionTypeEnumBool:
		return vm.WriteBool(r.Bool, w)
	}
	return fmt.Errorf("invalid value for *UnionFieldUnion")
}

func NewUnionFieldUnion() *UnionFieldUnion {
	return &UnionFieldUnion{}
}

func (_ *UnionFieldUnion) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionFieldUnion) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionFieldUnion) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionFieldUnion) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionFieldUnion) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionFieldUnion) SetString(v string)  { panic("Unsupported operation") }
func (r *UnionFieldUnion) SetLong(v int64) {
	r.UnionType = (UnionFieldUnionTypeEnum)(v)
}
func (r *UnionFieldUnion) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.Int{Target: (&r.Int)}
	case 1:
		return &types.Long{Target: (&r.Long)}
	case 2:
		return &types.Float{Target: (&r.Float)}
	case 3:
		return &types.Double{Target: (&r.Double)}
	case 4:
		return &types.String{Target: (&r.String)}
	case 5:
		return &types.Boolean{Target: (&r.Bool)}
	case 6:
		return r.Null
	}
	panic("Unknown field index")
}
func (_ *UnionFieldUnion) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionFieldUnion) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionFieldUnion) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionFieldUnion) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionFieldUnion) Finalize()                        {}

func (r *UnionFieldUnion) MarshalJSON() ([]byte, error) {
	if r == nil {
		return []byte("null"), nil
	}
	switch r.UnionType {
	case UnionFieldUnionTypeEnumInt:
		return json.Marshal(map[string]interface{}{"int": r.Int})
	case UnionFieldUnionTypeEnumLong:
		return json.Marshal(map[string]interface{}{"long": r.Long})
	case UnionFieldUnionTypeEnumFloat:
		return json.Marshal(map[string]interface{}{"float": r.Float})
	case UnionFieldUnionTypeEnumDouble:
		return json.Marshal(map[string]interface{}{"double": r.Double})
	case UnionFieldUnionTypeEnumString:
		return json.Marshal(map[string]interface{}{"string": r.String})
	case UnionFieldUnionTypeEnumBool:
		return json.Marshal(map[string]interface{}{"boolean": r.Bool})
	}
	return nil, fmt.Errorf("invalid value for *UnionFieldUnion")
}

func (r *UnionFieldUnion) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if value, ok := fields["int"]; ok {
		r.UnionType = 0
		return json.Unmarshal([]byte(value), &r.Int)
	}
	if value, ok := fields["long"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.Long)
	}
	if value, ok := fields["float"]; ok {
		r.UnionType = 2
		return json.Unmarshal([]byte(value), &r.Float)
	}
	if value, ok := fields["double"]; ok {
		r.UnionType = 3
		return json.Unmarshal([]byte(value), &r.Double)
	}
	if value, ok := fields["string"]; ok {
		r.UnionType = 4
		return json.Unmarshal([]byte(value), &r.String)
	}
	if value, ok := fields["boolean"]; ok {
		r.UnionType = 5
		return json.Unmarshal([]byte(value), &r.Bool)
	}
	return fmt.Errorf("invalid value for *UnionFieldUnion")
}
