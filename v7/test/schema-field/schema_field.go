// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     schema-field.avsc
 */
package avro

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type SchemaField struct {
	Schema string `json:"schema"`
}

const SchemaFieldAvroCRC64Fingerprint = "\xa5+\xd6\xe0\x11kW8"

func NewSchemaField() *SchemaField {
	return &SchemaField{}
}

func DeserializeSchemaField(r io.Reader) (*SchemaField, error) {
	t := NewSchemaField()
	deser, err := compiler.CompileSchemaBytes([]byte(t.AvroRecordSchema()), []byte(t.AvroRecordSchema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeSchemaFieldFromSchema(r io.Reader, schema string) (*SchemaField, error) {
	t := NewSchemaField()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.AvroRecordSchema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeSchemaField(r *SchemaField, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Schema, w)
	if err != nil {
		return err
	}
	return err
}

func (r *SchemaField) Serialize(w io.Writer) error {
	return writeSchemaField(r, w)
}

func (r *SchemaField) AvroRecordSchema() string {
	return "{\"fields\":[{\"name\":\"schema\",\"type\":\"string\"}],\"name\":\"SchemaField\",\"type\":\"record\"}"
}

func (r *SchemaField) SchemaName() string {
	return "SchemaField"
}

func (_ *SchemaField) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *SchemaField) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *SchemaField) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *SchemaField) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *SchemaField) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *SchemaField) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *SchemaField) SetString(v string)   { panic("Unsupported operation") }
func (_ *SchemaField) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SchemaField) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.Schema}
	}
	panic("Unknown field index")
}

func (r *SchemaField) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *SchemaField) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *SchemaField) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *SchemaField) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *SchemaField) Finalize()                        {}

func (_ *SchemaField) AvroCRC64Fingerprint() []byte {
	return []byte(SchemaFieldAvroCRC64Fingerprint)
}
